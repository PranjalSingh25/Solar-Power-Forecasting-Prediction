# .github/workflows/pylint.yml

name: Python Linting with Pylint

# Define triggers for the workflow (e.g., on push or pull request)
on:
  push:
    branches: [ main ] # Adjust branch names as needed
  pull_request:
    branches: [ main ] # Adjust branch names as needed

jobs:
  lint:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    strategy:
      fail-fast: false # Allow other jobs in the matrix to continue if one fails
      matrix:
        # Define the Python versions to test against
        python-version: ["3.8", "3.9", "3.10"]

    steps:
      # Step 1: Checkout the code from the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up the specific Python version from the matrix
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5 # Using a more recent version of setup-python
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip' # Optional: Cache pip dependencies to speed up builds

      # Step 3: Install all necessary dependencies, including pylint
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pylint
          # If you have project-specific dependencies needed for pylint to run correctly, install them too:
          # Example: if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          # Example: if [ -f pyproject.toml ]; then pip install .; fi

      # Step 4: Run pylint to analyze the code
      # Combined the two names/steps from your original example into one functional step
      - name: Analyse code with pylint
        run: |
          # Find all Python files tracked by Git and run pylint on them
          # The command will exit with a non-zero status if linting errors are found, failing the step
          pylint $(git ls-files '*.py')
